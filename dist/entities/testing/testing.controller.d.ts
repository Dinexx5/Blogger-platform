import { Response } from 'express';
import { Repository } from 'typeorm';
import { User } from '../users/domain/user.entity';
import { Attempt } from '../attempts/domain/attempt.entity';
import { BlogBansInfo } from '../blogs/domain/blogBansInfo.entity';
import { BlogOwnerInfo } from '../blogs/domain/blogOwner.entity';
import { CommentatorInfo } from '../comments/domain/commentatorInfo.entity';
import { PostInfoForComment } from '../comments/domain/postInfo.entity';
import { Device } from '../devices/domain/device.entity';
import { PostLike } from '../likes/domain/postLike.entity';
import { CommentLike } from '../likes/domain/commentLike.entity';
import { Token } from '../tokens/domain/token.entity';
import { SaBlogBan } from '../bans/domain/saBlogBan.entity';
import { SaUserBan } from '../bans/domain/saUserBan.entity';
import { UserBanInfo } from '../users/domain/banInfo.entity';
import { EmailConfirmationInfo } from '../users/domain/emailConfirmation.entity';
import { PasswordRecoveryInfo } from '../users/domain/passwordRecovery.entity';
import { UserBanForBlog } from '../blogger/domain/userBanForBlog.entity';
import { Comment } from '../comments/domain/comment.entity';
import { Post } from '../posts/domain/post.entity';
import { Blog } from '../blogs/domain/blog.entity';
export declare class TestingController {
    private readonly attempts;
    private readonly blogBansInfo;
    private readonly blogOwners;
    private readonly commentatorInfo;
    private readonly postInfo;
    private readonly devices;
    private readonly postsLikes;
    private readonly commentsLikes;
    private readonly tokens;
    private readonly blogBans;
    private readonly userBans;
    private readonly userBansInfo;
    private readonly emailConfirmationInfo;
    private readonly passwordRecoveryInfo;
    private readonly userBansForBlog;
    private readonly comments;
    private readonly posts;
    private readonly blogs;
    private readonly users;
    constructor(attempts: Repository<Attempt>, blogBansInfo: Repository<BlogBansInfo>, blogOwners: Repository<BlogOwnerInfo>, commentatorInfo: Repository<CommentatorInfo>, postInfo: Repository<PostInfoForComment>, devices: Repository<Device>, postsLikes: Repository<PostLike>, commentsLikes: Repository<CommentLike>, tokens: Repository<Token>, blogBans: Repository<SaBlogBan>, userBans: Repository<SaUserBan>, userBansInfo: Repository<UserBanInfo>, emailConfirmationInfo: Repository<EmailConfirmationInfo>, passwordRecoveryInfo: Repository<PasswordRecoveryInfo>, userBansForBlog: Repository<UserBanForBlog>, comments: Repository<Comment>, posts: Repository<Post>, blogs: Repository<Blog>, users: Repository<User>);
    deleteAll(res: Response): Promise<Response<any, Record<string, any>>>;
}
