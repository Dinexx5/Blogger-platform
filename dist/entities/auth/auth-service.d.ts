import { JwtService } from '@nestjs/jwt';
import { UsersService } from '../users/users.service';
import { DevicesService } from '../devices/devices.service';
import { EmailAdapter } from '../../adapters/email.adapter';
import { CreateUserModel, NewPasswordModel } from '../users/userModels';
import { BansRepository } from '../bans/bans.repository';
import { Repository } from 'typeorm';
import { User } from '../users/domain/user.entity';
import { UserBanInfo } from '../users/domain/banInfo.entity';
import { EmailConfirmationInfo } from '../users/domain/emailConfirmation.entity';
import { PasswordRecoveryInfo } from '../users/domain/passwordRecovery.entity';
import { UsersRepository } from '../users/users.repository';
import { Token } from '../tokens/domain/token.entity';
export declare class AuthService {
    private readonly usersTypeOrmRepository;
    private readonly banInfoRepository;
    private readonly emailConfirmationRepository;
    private readonly passwordRecoveryRepository;
    private readonly tokenRepository;
    private readonly jwtService;
    private readonly emailAdapter;
    private readonly usersService;
    private readonly devicesService;
    private readonly bansRepository;
    private readonly usersRepository;
    constructor(usersTypeOrmRepository: Repository<User>, banInfoRepository: Repository<UserBanInfo>, emailConfirmationRepository: Repository<EmailConfirmationInfo>, passwordRecoveryRepository: Repository<PasswordRecoveryInfo>, tokenRepository: Repository<Token>, jwtService: JwtService, emailAdapter: EmailAdapter, usersService: UsersService, devicesService: DevicesService, bansRepository: BansRepository, usersRepository: UsersRepository);
    validateUser(username: string, password: string): Promise<any>;
    createJwtAccessToken(userId: number): Promise<string>;
    generateJwtRefreshToken(userId: number, deviceName: string, ip: string): Promise<string>;
    updateJwtRefreshToken(deviceId: string, exp: number, userId: number): Promise<string>;
    getRefreshTokenInfo(token: string): Promise<any>;
    getAccessTokenInfo(token: string): Promise<any>;
    deleteCurrentToken(token: string): Promise<void>;
    deleteDeviceForLogout(token: string): Promise<void>;
    createUser(inputModel: CreateUserModel): Promise<User>;
    resendEmail(email: string): Promise<boolean>;
    confirmEmail(code: string): Promise<boolean>;
    sendEmailForPasswordRecovery(email: string): Promise<boolean>;
    updatePassword(inputModel: NewPasswordModel): Promise<boolean>;
}
